#%RAML 0.8
---
title: SIF Student Record Exchange
version: v3.4.draft1
mediaType:  application/xml
protocols: [HTTPS]
baseUri: https://sif3service.dev/{version}/svcs/dev/requestProvider

securedBy: [sifHMAC]
securitySchemes:
    - sifHMAC: !include traits/sifHMAC.yaml

documentation:
  - title: Overview
    content: |
      A Student Record Exchange (SRE) job tracks the status of moving a student's full student record from a SIF service provider. The process includes four basic phases:
        1. Initializing the request
        2. Requesting permission to obtain the record
        3. Fetching the record
        4. Sending a receipt back to the responder

/sreJobs:
  displayName: Create Job Object
  description: Creating a new SRE Job begins the process of requesting a student's records, but does not immediately provide the records.
  post:
    description: Submit a new SRE job for processing.
    queryParameters:
      ncesId:
        description: The NCES ID of the school, district, or state from which the record will be provided. The NCES ID is provided by the Student Locator service. If not provided, the SRE Job will only be created in the scope of local records.
        type: integer
        required: false
        example: 123456
    body:
      application/xml:
        schema: !include schemas/job.xsd
    responses:
      201:
        description: Successfully created the job.
        body:
          application/xml:
            schema: !include schemas/job.xsd
    
  /{jobId}:
    displayName: Job Details
    get:
      description: Get the details of a specific job, identified by {jobId}.
      responses:
        200:
          body:
            application/xml:
              schema: !include schemas/job.xsd
  
    delete:
      description: Delete the job. This also deletes all child resources (permissionRequest, sre, receipt).
      responses:
        204:
          description: Job was successfully deleted.

/sreJobs/{jobId}/initialize:
  displayName: |
    Phase 1: Initialize the Request
  description: |
    The Job object above only stores the basic infrastructure information about the job in question. The immediate next step is for the client to submit data to the provider that initializes the request with the necessary information to process the job: requestor information, provider information, and student ID.

  post:
    description: Submit the initialization data for this job.
    body:
      application/xml:
        schema: !include schemas/sreInitialization.xsd
    responses:
      201:
        description: Successfully updated the initialization information for this job.
        body:
          application/xml:
            schema: !include schemas/sreInitialization.xsd
            
  get:
    description: Get the original initialization information for this job.
    responses:
      200:
        description: Success
        body:
          application/xml:
            schema: !include schemas/sreInitialization.xsd
      404:
        description: The initialization data has not yet been submitted and is not available.
        

/sreJobs/{jobId}/permissionRequests:
  displayName: |
    Phase 2: Permission Request
  description: |
    Before a requester can access the `sre` object for a student, he must have obtained permission. This permission is tracked through this child resource called a "Permission Request", which contains details of the request, the status of the approval, and a token that is used to obtain the `sre` object in the next step. Because permission approvals will often require human intervention, these are always issued as a SIF delayed request.
    
    Note that this endpoint does not support a `PUT` operation, which would normally be used to modify/update an existing resource. Permission requests cannot be modified by the consumer because they may already be in process out-of-band. Consumers wishing to modify a permission request should `POST` a new resource with an updated request for approval.
    
    SRE service providers should take care to keep the state of this phase in sync with the condition of the permissionRequest object(s) that exist for this job. For example, if a consumer submits a new permissionRequest, this phase should be reset to the `INPROGRESS` state and the `isActive` element of existing permissionRequest objects should be changed. After a request is approved or denied, this phase state should be updated to reflect the response: A `FAILED` permissionRequest phase means that permission was not approved by the provider, and a `COMPLETED` phase means that the request was approved. The provider may include extra information about why the request was approved or denied in the `providerComment` element of this permissionRequest record.
  
  get:
    description: Retrieves the list of permission requests.
    queryParameters:
      isActive:
        description: Only return the request which is the primary, active permissionRequest. If left blank, all records are returned.
        type: boolean
        required: false
    responses:
      200:
        description: Success
        body:
          application/xml:
            schema: !include schemas/srePermissionRequest.xsd
      404:
        description: No permission requests have been submitted.

  post:
    description: Issues a new permission request. Consumers can specify the request type to be an immediate response or a delayed one as specified by SIF version 3.x. 
    headers:
      queueId:
        description: The queue ID that can accept the delayed response. TODO move to SIF `queueable` trait.
        required: false
      requestType:
        description: IMMEDIATE or DELAYED
        required: false
        default: IMMEDIATE
    body:
      application/xml:
        schema: !include schemas/srePermissionRequest.xsd
    responses:
      202:
        description: Delayed response accepted. Monitor the queue specified by `queueId` for the response.
      200:
        description: The immediate response from the provider.
        body:
          application/xml:
            schema: !include schemas/srePermissionRequest.xsd
        
  /{id}:
    get:
      description: Fetches the details about the specified permission request.
      responses:
        200:
          description: Success
          body:
            application/xml:
              schema: !include schemas/srePermissionRequest.xsd
        404:
          description: No matching permission request could be found.
    

/sreJobs/{jobId}/xSre:
  displayName: |
    Phase 3: SRE Object
  description: Once the consumer has proper permissions, this phase requests the actual student record object. The provider should check that the requestToken is valid before delivering the xSre object.
  get:
    description: Get the object
    headers:
      xQuery:
        description: The values requested from the provider in the xSre object.
        required: false
        type: string
      requestToken:
        description: The requestToken that authorizes access to this student record. Could have been retrieved from the permissionRequest object or received from an out-of-band process.
        required: false
        type: string
    responses:
      200:
        description: Returns the xSre object.
        body:
          application/xml:
            schema: !include https://github.com/Access4Learning/NADM/raw/master/Report/SIFNAxSRE.xsd
      401:
        description: Access denied - the requestToken provided is not valid.

/sreJobs/{jobId}/receipt:
  displayName: |
    Phase 4: Receipt
  description: Notifies the provider of the status of the record request, with additional receipt codes that the provider may be able to act upon. For example, this object could report that a student has been sucessfully enrolled in a receiving school district.
  post:
    description: |
      Post a new receipt object to the provider.
    body:
      text/xml:
        schema: !include schemas/sreReceipt.xsd
    responses:
      201:
        description: The receipt was delivered to the provider.
        body:
          application/xml:
            schema: !include schemas/sreReceipt.xsd
